generator client {
	provider = "prisma-client-js"
}

datasource db {
	provider = "postgresql"
	url = env("DATABASE_URL")
}

model User {
	id					Int				@id @default(autoincrement())
	createdAt			DateTime		@default(now())
	updatedAt			DateTime		@updatedAt
	avatar				String?
	username			String?			@unique
	login				String			@unique
	currentStatus		String
	isTwoFAEnabled		Boolean			@default(false)
	twoFAsecret			String?
	isFirstLogin		Boolean			@default(true)
	socketId			String?			@unique
	chatRoomsCreated	ChatRoom[]		@relation("chatCreated")
	memberShips			Membership[]	@relation("membershipUser")
	messagesSent		Message[]		@relation("SentMessages")
	gamesLosed			Game[]			@relation("gamesLosed")
	gamesWon			Game[]			@relation("gamesWon")
	userStats			UserStats?
	games				Game[]			@relation("gamesPlayed")
	blockedUsers		User[]			@relation("blockedUsers")
	blockedBy			User[]			@relation("blockedUsers")
}

model Message {
	id			Int			@id @default(autoincrement())
	createdAt	DateTime 	@default(now())
	updatedAt	DateTime	@updatedAt
	content		String
	senderId	Int
	chatRoomId	Int?
	chatRoom	ChatRoom?	@relation("chatMessages", fields: [chatRoomId], references: [id])
	sender		User		@relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
}

model ChatRoom {
	id				Int				@id @default(autoincrement())
	createdAt		DateTime		@default(now())
	updatedAt		DateTime		@updatedAt
	name			String			@unique
	type			String
	hashedPassword	String?
	creatorId		Int
	owner			User			@relation("chatCreated", fields: [creatorId], references: [id])
	messages		Message[]		@relation("chatMessages")
	memberShips		Membership[]	@relation("membership")
}

model Membership {
	id			Int			@id @default(autoincrement())
	createdAt	DateTime	@default(now())
	updatedAt	DateTime	@updatedAt
	isAdmin		Boolean		@default(false)
	isBanned	Boolean		@default(false)
	isMuted		Boolean		@default(false)
	mutedUntil	DateTime?
	userId		Int
	chatRoomId	Int
	user		User		@relation("membershipUser", fields: [userId], references: [id], onDelete: Cascade)
	chatroom	ChatRoom	@relation("membership", fields: [chatRoomId], references: [id], onDelete: Cascade)
}

model UserStats {
	id			Int			@id @default(autoincrement())
	createdAt	DateTime	@default(now())
	updatedAt	DateTime	@updatedAt
	winStreak	Int			@default(0)
	win			Int			@default(0)
	ratio		Float		@default(0)
	played		Int			@default(0)
	totalScore	Int			@default(0)
	lose		Int			@default(0)
	userId		Int			@unique
	user		User		@relation(fields: [userId], references: [id])
}

model Game {
	id				Int			@id @default(autoincrement())
	createdAt		DateTime	@default(now())
	updatedAt		DateTime	@updatedAt
	users			User[]		@relation("gamesPlayed")
	loser			User?		@relation("gamesLosed", fields: [gameLosedId], references: [id])
	gameLosedId		Int?
	winner			User?		@relation("gamesWon", fields: [gameWonId], references: [id])
	gameWonId		Int?
	winnerScore		Int			@default(0)
	loserScore		Int			@default(0)
	gameDuration	Int			@default(0)
}
