generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int        @id @default(autoincrement())
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  avatar           String?
  username         String?    @unique
  login            String     @unique
  isTwoFAEnabled   Boolean    @default(false)
  twoFAsecret      String?
  isFirstLogin     Boolean    @default(true)
  chatRoomsCreated ChatRoom[] @relation("chatCreated")
  gamesLosed       Game[]     @relation("gamesLosed")
  gamesWon         Game[]     @relation("gamesWon")
  messageReceived  Message[]  @relation("ReceivedMessages")
  messagesSent     Message[]  @relation("SentMessages")
  userStats        UserStats?
  chatRoomsAdmin   ChatRoom[] @relation("chatAdmins")
  games            Game[]     @relation("gamesPlayed")
  chatRoom         ChatRoom[] @relation("members")
}

model Message {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  content    String
  senderId   Int
  receiverId Int?
  chatRoomId Int?
  chatRoom   ChatRoom? @relation("chatMessages", fields: [chatRoomId], references: [id])
  receiver   User?     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  sender     User      @relation("SentMessages", fields: [senderId], references: [id])
}

model ChatRoom {
  id             Int       @id @default(autoincrement())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  name           String
  creatorId      Int
  type           String
  hashedPassword String?
  owner          User      @relation("chatCreated", fields: [creatorId], references: [id])
  messages       Message[] @relation("chatMessages")
  admins         User[]    @relation("chatAdmins")
  members        User[]    @relation("members")
}

model Game {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  drew         Boolean  @default(false)
  gameDuration Int      @default(0)
  gameLosedId  Int?
  gameWonId    Int?
  loser        User?     @relation("gamesLosed", fields: [gameLosedId], references: [id])
  winner       User?     @relation("gamesWon", fields: [gameWonId], references: [id])
  users        User[]   @relation("gamesPlayed")
}

model UserStats {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  winStreak  Int      @default(0)
  win        Int      @default(0)
  drew       Int      @default(0)
  ratio      Float    @default(0)
  played     Int      @default(0)
  totalScore Int      @default(0)
  lose       Int      @default(0)
  userId     Int      @unique
  user       User     @relation(fields: [userId], references: [id])
}
